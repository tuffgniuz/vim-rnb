<%
    information = {
        author:      "Manu Febie",
        email:       "manu.febie@gmail.com",
        name:        "kuroi-boshi",
        description: "A theme inspired by mr.robot",
        webpage:     "https://github.com/laseamru/kuroi-boshi.vim"
    }

    black       = ["#202020", 0, "black"]         # default background
    darkred     = ["#b74b57", 1, "darkred"]       
    darkgreen   = ["#70a288", 2, "darkgreen"]     # selection background
    darkyellow  = ["#dab785", 3, "darkyellow"]    # comments, invisibles, line higlighting
    darkblue    = ["#577399", 4, "darkblue"]      # dark foreground (used for statusbars)
    darkmagenta = ["#be9db8", 5, "darkmagenta"]   # default foreground, caret, delimiters,  
    darkcyan    = ["#6fa090", 6, "darkcyan"]
    gray        = ["#ced2dc", 7, "gray"]
    darkgray    = ["#363636", 8, "darkgray"]
    red         = ["#cd828a", 9, "red"]
    green       = ["#b0c79c", 10, "green"]
    yellow      = ["#e6ceac", 11, "yellow"]
    blue        = ["#849ab9", 12, "blue"]
    magenta     = ["#c8adc3", 13, "magenta"]
    cyan        = ["#87baab", 14, "cyan"]
    white       = ["#f2f5fa", 15, "white"]

    # Step 4: highlights
    #
    # You can define highlight groups like this:
    #
    #   [ "Normal",       name of the highlight group
    #     white,          the color used for background color, or use "NONE", "fg" or "bg"
    #     darkgray,       the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "NONE"          style, can be "bold", "underline", "reverse", "italic",
    #                     "standout", "NONE", "undercurl", or a comma-separated list of
    #                     valid attributes like "underline,bold"
    #   ]
    #
    # The sample above tells Vim to render normal text in dark gray against a white
    # background, without any other styling.
    #
    # Or you can link an highlight group to another. Here, "Title" will inherit its style from
    # "Normal":
    #
    #   [ "Title", "Normal" ]
    #
    # In GUI Vim, there is an additional color for the undercurl used to
    # highlight spelling mistakes:
    #
    #   [ "SpellBad",     name of the highlight group
    #     "NONE",         the color used for background color, or use "NONE", "fg" or "bg"
    #     red,            the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "undercurl",    style
    #     red             color used for the undercurl
    #   ]
    #
    # The sample above tells Vim to render badly spelled words in red against the current
    # background, with a red undercurl.
    #
    # You can add any custom highlight group to the standard list below but you shouldn't
    # remove any if you want a working colorscheme. Most of them are described under
    # :help highlight-default, the others are taken from :help group-name. Both help sections
    # are good reads, by the way.
    highlights = [
        [ "Normal", black, white, "NONE" ],
        [ "NonText", black, magenta, "NONE" ],
        [ "EndOfBuffer","NonText" ],
        [ "Comment", black, darkgray, "NONE" ],
        [ "Constant", black, darkred, "NONE" ],
        [ "Error", red, white, "NONE" ],
        [ "Identifier", black, red, "NONE" ],
        [ "Ignore", black, darkred, "NONE" ],
        [ "PreProc", black, darkgray, "NONE" ],
        [ "Special", black, blue, "NONE" ],
        [ "Statement", black, red, "italic" ],
        [ "String", black, blue, "NONE" ],
        [ "Number", black, green, "NONE" ],
        [ "Todo", green, white, "NONE" ],
        [ "Type", black, blue, "NONE" ],
        [ "Underlined", black, blue, "NONE" ],
        [ "StatusLine", gray, white, "NONE" ],
        [ "StatusLineNC", darkgray, white, "NONE" ],
        [ "StatusLineTerm", "StatusLine" ],
        [ "StatusLineTermNC", "StatusLineNC" ],
        [ "VertSplit", black, black, "NONE" ],
        [ "TabLine", gray, white, "NONE" ],
        [ "TabLineFill", gray, white, "NONE" ],
        [ "TabLineSel", gray, green, "NONE" ],
        [ "Title", black, darkred, "NONE" ],
        [ "CursorLine", gray, red, "NONE" ],
        [ "LineNr", black, darkgray, "NONE" ],
        [ "CursorLineNr", black, red, "NONE" ],
        [ "helpLeadBlank", white, darkgray, "NONE" ],
        [ "helpNormal", white, darkgray, "NONE" ],
        [ "Visual", white, darkgray, "NONE" ],
        [ "VisualNOS", white, darkgray, "NONE" ],
        [ "Pmenu", darkgray, white, "NONE" ],
        [ "PmenuSbar", darkgray, white, "NONE" ],
        [ "PmenuSel", darkgray, white, "NONE" ],
        [ "PmenuThumb", white, darkgray, "NONE" ],
        [ "FoldColumn", white, darkgray, "NONE" ],
        [ "Folded", white, darkgray, "NONE" ],
        [ "WildMenu", white, darkgray, "NONE" ],
        [ "SpecialKey", white, darkgray, "NONE" ],
        [ "DiffAdd", black, green, "NONE" ],
        [ "DiffChange", black, magenta, "NONE" ],
        [ "DiffDelete", black, red, "NONE" ],
        [ "DiffText", black, yellow, "NONE" ],
        [ "IncSearch", magenta, black, "NONE" ],
        [ "Search", gray, white, "NONE" ],
        [ "Directory", white, darkgray, "NONE" ],
        [ "MatchParen", black, cyan, "NONE" ],
        [ "SpellBad", darkgray, red, "NONE", red ],
        [ "SpellCap", darkgray, yellow, "NONE", blue ],
        [ "SpellLocal", darkgray, white, "NONE", magenta ],
        [ "SpellRare", darkgray, white, "NONE", cyan ],
        [ "ColorColumn", white, darkgray, "NONE" ],
        [ "SignColumn", white, darkgray, "NONE" ],
        [ "ErrorMsg", red, white, "NONE" ],
        [ "ModeMsg", black, cyan, "NONE" ],
        [ "MoreMsg", white, darkgray, "NONE" ],
        [ "Question", white, darkgray, "NONE" ],
        [ "WarningMsg", "Error" ],
        [ "Cursor", gray, white, "NONE" ],
        [ "CursorIM", "Cursor" ],
        [ "CursorColumn", white, darkgray, "NONE" ],
        [ "QuickFixLine", white, darkgray, "NONE" ],
        [ "Terminal", "Normal" ],
        [ "Conceal", darkgray, white, "NONE" ],
        [ "ToolbarLine", darkgray, white, "NONE" ],
        [ "ToolbarButton", darkgray, white, "NONE" ],
        [ "debugPC", white, darkgray, "NONE" ],
        [ "debugBreakpoint", darkgray, green, "NONE" ],

        ["pythonBuiltinType", black, darkred, "italic"],
        ["pythonClassVar", black, red, 'NONE'],
        ["pythonDottedName", black, magenta, "NONE"],
        ["pythonFunction", black, white, "NONE"],
        ["pythonFunctionCall", black, red, "italic"],
        ["pythonImport", black, gray, "italic"],
        ["pythonNone", black, darkgray, "bold"],
        ["pythonRepeat", black, red, "italic"],
        ["pythonOperator", black, darkmagenta, "italic"],
        ["pythonStatement", black, darkred, "italic"],
        ["pythonConditional", black, red, "italic"],
        ["pythonDecorator", black, darkgray, "NONE"],
    ]

    # Define the color palette used by :terminal when in GUI Vim
    # or in TUI Vim when 'termguicolors' is enabled. If this list
    # is empty or if it doesn't contain exactly 16 items, the corresponding
    # Vim variable won't be set.
    #
    # The expected values are colors defined in step 3.
    #
    # Terminal emulators use a basic palette of 16 colors that can be
    # addressed by CLI and TUI tools via their name or their index, from
    # 0 to 15. The list is not really standardized but it is generally
    # assumed to look like this:
    #
    #   Index | Name
    #  -------|-------------
    #   0     | black
    #   1     | darkred
    #   2     | darkgreen
    #   3     | darkyellow
    #   4     | darkblue
    #   5     | darkmagenta
    #   6     | darkcyan
    #   7     | gray
    #   8     | darkgray
    #   9     | red
    #   10    | green
    #   11    | yellow
    #   12    | blue
    #   13    | magenta
    #   14    | cyan
    #   15    | white
    #
    # While you are certainly free to make colors 0 to 7 shades of blue,
    # this will inevitably cause usability issues soâ€¦ be careful.
    terminal_ansi_colors = [
        black,
        darkred,
        darkgreen,
        darkyellow,
        darkblue,
        darkmagenta,
        darkcyan,
        gray,
        darkgray,
        red,
        green,
        yellow,
        blue,
        magenta,
        cyan,
        white
    ]

    # Step 5: generation
    #
    # From a separate shell:
    #
    #     $ erb -T - bar.erb > bar.vim
    #
    # From Vim:
    #
    #     :!erb -T - % > %<.vim
    #
    # If this template comes with a Makefile, you can do it from a separate shell,
    # with the make program:
    #
    #     $ make

    # These online resources can help you design your colorscheme:
    #
    #   * http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
    #         the xterm palette
    #   * http://whatcolor.herokuapp.com/
    #         play with hexadecimal colors right in the address bar (currently down)
    #   * http://color.hailpixel.com/
    #         similar concept, fuzzier implementation
    #   * http://colourco.de/
    #         similar concept, fancier implementation
    #   * http://www.colr.org/
    #         extract a palette from an image
    #   * http://colores.manugarri.com/
    #         search for 'word', get images and color palettes
    #   * http://www.colourlovers.com/palettes
    #         user-created palettes
    #   * http://www.perbang.dk/color+scheme/
    #         a no-nonsense colorscheme generator
    #   * https://color.adobe.com/
    #         Adobe's fancy colorscheme generator
    #   * http://paletton.com/
    #         The classic 'Color Scheme Designer', rebranded
    #   * http://vrl.cs.brown.edu/color
    #         A very smart palette generator
    #   * https://cmcenroe.me/2018/04/03/colour-scheme.html
    #         "I Made My Own Colour Scheme and You Can Too!"

    # A few general advices:
    #
    #   * The Windows console is limited to the 16 so-called "ANSI" colors but it used to
    #     have a few of them interverted which makes numbers impractical. Use color names
    #     instead of numbers: :help cterm-colors
    #   * The Windows console (yeahâ€¦) doesn't do italics, underlines or bolded text;
    #     it is limited to normal and reverse. Keep that in mind if you want
    #     your colorscheme to be usable in as many environments as possible by as many
    #     people as possible.
    #   * Actually, terminal emulators rarely do italics.
    #   * All of the terminal emulators in use these days allow their users to
    #     change the 16 so-called "ANSI" colors. It is also possible on some platforms
    #     to change some or all of the 256 colors in the xterm palette. Don't take
    #     anything for granted.
    #   * When used against a light background, strong colors work better than muted
    #     ones. Light or dark doesn't really matters. Also, it is harder to discriminate
    #     between two similar colors on a light background.
    #   * Both strong and muted colors work well against a dark background. It is also
    #     easier to work with similar colors, but dark colors don't work at all.
    #   * Use as many text samples as possible. String-heavy languages may look completely
    #     different than keyword-heavy ones. This can have an impact on the usability
    #     of your colorscheme.
    #   * Most terminal emulators and terminal multiplexers currently in use on unix-like
    #     systems support 256 colors but they almost always default to a '$TERM' that tells
    #     Vim otherwise. Your users will need to make sure their terminal emulator/multiplexer
    #     is correctly set up if they want to enjoy the best possible experience.

    # Many thanks to Barry Arthur (https://github.com/dahu) for the original idea.

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Webpage:     <%= information[:webpage] %>
" Description: <%= information[:description] %>
" Last Change: <%= Time.new.strftime "%Y-%m-%d" %>

hi clear

if exists("syntax_on")
  syntax reset
endif

let colors_name = "<%= information[:name].downcase %>"

if ($TERM =~ '256' || &t_Co >= 256) || has("gui_running")
<% for highlight in highlights -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% for highlight in highlights -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% for link in links -%>
hi link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
let g:terminal_ansi_colors = [ <% for color in terminal_ansi_colors -%>'<%= color[0] %>', <% end -%>]
<% end -%>

" Generated with RNB (https://github.com/romainl/vim-rnb)
